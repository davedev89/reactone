{"ast":null,"code":"var _jsxFileName = \"/home/daviddc/personalProjects/react/reactone/src/App/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { AppUI } from './AppUI'; //import './App.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultTodos = [{\n  text: 'Cortar cebolla',\n  completed: true\n}, {\n  text: 'Tomar curso',\n  completed: false\n}, {\n  text: 'Correr',\n  completed: false\n}];\n\nfunction App(props) {\n  _s();\n\n  const [todos, setTodos] = React.useState(defaultTodos);\n  const [searchValue, setSearchValue] = React.useState(''); // esto me permite darle un estado. El array recibe un valor y tambien una funcion para setear el valor\n\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n  let searchedTodos = [];\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  }\n\n  const completeTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos[todoIndex].completed = true;\n    setTodos(newTodos);\n  };\n\n  const deleteTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    setTodos(newTodos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppUI, {\n    totalTodos: totalTodos,\n    completedTodos: completedTodos,\n    searchValue: searchValue,\n    setSearchValue: setSearchValue,\n    searchedTodos: searchedTodos\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 4\n  }, this);\n}\n\n_s(App, \"OGMHQXAjvuOGZdqUUooJQ35j+r8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/daviddc/personalProjects/react/reactone/src/App/index.js"],"names":["React","AppUI","defaultTodos","text","completed","App","props","todos","setTodos","useState","searchValue","setSearchValue","completedTodos","filter","todo","length","totalTodos","searchedTodos","todoText","toLowerCase","searchText","includes","completeTodo","todoIndex","findIndex","newTodos","deleteTodo","splice"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,SAApB,C,CAEA;;;AAEA,MAAMC,YAAY,GAAG,CACnB;AAACC,EAAAA,IAAI,EAAE,gBAAP;AAAyBC,EAAAA,SAAS,EAAE;AAApC,CADmB,EAEnB;AAACD,EAAAA,IAAI,EAAE,aAAP;AAAsBC,EAAAA,SAAS,EAAE;AAAjC,CAFmB,EAGnB;AAACD,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,SAAS,EAAE;AAA5B,CAHmB,CAArB;;AAOA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAElB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CAAeP,YAAf,CAA1B;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCX,KAAK,CAACS,QAAN,CAAe,EAAf,CAAtC,CAHkB,CAGuC;;AAEzD,QAAMG,cAAc,GAAGL,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAI,CAAC,CAACA,IAAI,CAACV,SAA5B,EAAuCW,MAA9D;AACA,QAAMC,UAAU,GAAGT,KAAK,CAACQ,MAAzB;AAEA,MAAIE,aAAa,GAAG,EAApB;;AAEA,MAAG,CAACP,WAAW,CAACK,MAAb,IAAuB,CAA1B,EAA6B;AAC3BE,IAAAA,aAAa,GAAGV,KAAhB;AACD,GAFD,MAEO;AAELU,IAAAA,aAAa,GAAGV,KAAK,CAACM,MAAN,CAAcC,IAAI,IAAI;AAEpC,YAAMI,QAAQ,GAAGJ,IAAI,CAACX,IAAL,CAAUgB,WAAV,EAAjB;AACA,YAAMC,UAAU,GAAGV,WAAW,CAACS,WAAZ,EAAnB;AAEA,aAAOD,QAAQ,CAACG,QAAT,CAAkBD,UAAlB,CAAP;AACD,KANe,CAAhB;AAOD;;AAED,QAAME,YAAY,GAAInB,IAAD,IAAU;AAE7B,UAAMoB,SAAS,GAAGhB,KAAK,CAACiB,SAAN,CAAgBV,IAAI,IAAIA,IAAI,CAACX,IAAL,KAAcA,IAAtC,CAAlB;AAEA,UAAMsB,QAAQ,GAAG,CAAC,GAAGlB,KAAJ,CAAjB;AACAkB,IAAAA,QAAQ,CAACF,SAAD,CAAR,CAAoBnB,SAApB,GAAgC,IAAhC;AACAI,IAAAA,QAAQ,CAACiB,QAAD,CAAR;AACD,GAPD;;AASA,QAAMC,UAAU,GAAIvB,IAAD,IAAU;AAE3B,UAAMoB,SAAS,GAAGhB,KAAK,CAACiB,SAAN,CAAgBV,IAAI,IAAIA,IAAI,CAACX,IAAL,KAAcA,IAAtC,CAAlB;AAEA,UAAMsB,QAAQ,GAAG,CAAC,GAAGlB,KAAJ,CAAjB;AACAkB,IAAAA,QAAQ,CAACE,MAAT,CAAgBJ,SAAhB,EAA2B,CAA3B;AACAf,IAAAA,QAAQ,CAACiB,QAAD,CAAR;AACD,GAPD;;AAUA,sBACC,QAAC,KAAD;AACA,IAAA,UAAU,EAAET,UADZ;AAEA,IAAA,cAAc,EAAEJ,cAFhB;AAGA,IAAA,WAAW,EAAEF,WAHb;AAIC,IAAA,cAAc,EAAEC,cAJjB;AAKC,IAAA,aAAa,EAAEM;AALhB;AAAA;AAAA;AAAA;AAAA,UADD;AASD;;GAnDQZ,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport {AppUI} from './AppUI';\n\n//import './App.css';\n\nconst defaultTodos = [\n  {text: 'Cortar cebolla', completed: true},\n  {text: 'Tomar curso', completed: false},\n  {text: 'Correr', completed: false}\n];\n\n\nfunction App(props) {\n\n  const [todos, setTodos] = React.useState(defaultTodos)\n  const [searchValue, setSearchValue] = React.useState('') // esto me permite darle un estado. El array recibe un valor y tambien una funcion para setear el valor\n\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n\n  let searchedTodos = [];\n\n  if(!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n\n    searchedTodos = todos.filter( todo => {\n\n      const todoText = todo.text.toLowerCase()\n      const searchText = searchValue.toLowerCase()\n      \n      return todoText.includes(searchText);\n    });\n  }\n\n  const completeTodo = (text) => {\n\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n  \n    const newTodos = [...todos];\n    newTodos[todoIndex].completed = true;\n    setTodos(newTodos);\n  };\n\n  const deleteTodo = (text) => {\n\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n  \n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    setTodos(newTodos);\n  };\n\n\n  return (\n   <AppUI \n   totalTodos={totalTodos}\n   completedTodos={completedTodos}\n   searchValue={searchValue}\n    setSearchValue={setSearchValue}\n    searchedTodos={searchedTodos}\n   />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}